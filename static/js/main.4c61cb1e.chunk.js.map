{"version":3,"sources":["Components/API/API.js","Components/Redux/reducer.js","Components/InputFullName.jsx","Components/DrawingData.jsx","Components/InputShortName.jsx","Components/InputCurrency.jsx","Components/InputAlpha3CodeCountry.jsx","App.js","serviceWorker.js","Components/Redux/store.js","index.js"],"names":["instance","axios","baseURL","api","cache","_get","url","this","Promise","resolve","get","then","res","data","catch","error","console","Error","getFullName","fullName","sendShortName","shortName","sendCurrencyCode","currencyCode","sendCountryCode","code","allCountryData","DATA_ITEM","SET_ERROR","initialState","countryFullName","dataItems","countryShortName","allDataItems","countryCode","arrRepeatedRequests","loading","getFullNameSuccess","inputValue","type","shortNameChangedAC","currencyChangedAC","countryCodeChangeAC","sendDataItemAC","setError","errorMessage","setLoading","_errorInterval","_setError","dispatch","clearTimeout","message","setTimeout","_tryCatch","operation","a","reducer","state","action","allDataCountry","dataItem","InputFullName","props","className","value","onChange","fullNameChanged","shape","icon","onClick","sendFullName","CountryProperty","name","defaultMessage","isImage","isArrayOfObjects","length","text","Array","isArray","map","el","id","src","DrawingData","InputShortName","shortNameChanged","InputCurrency","currencyChanged","InputAlpha3CodeCountry","countryCodeChange","LANGUAGES","App","isChecked","currentLocal","messages","messages_ru","messages_en","changeLocal","newLang","setState","localStorage","setItem","e","currentTarget","sendFullDataItem","sendShortDataItem","language","getItem","CodeCountries","key","alpha3Code","locale","checked","checkedChildren","unCheckedChildren","React","Component","ConnectApp","connect","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c61cb1e.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://restcountries.eu/rest/v2/\",\r\n})\r\n\r\n\r\nexport const api = {\r\n    cache: {},\r\n\r\n    _get(url) {\r\n        if (this.cache[url]) return Promise.resolve(this.cache[url]);\r\n\r\n        return instance.get(url)\r\n            .then(res => {\r\n                this.cache[url] = res.data;\r\n                return res.data\r\n            })\r\n            .catch(error => {\r\n                console.error(error)\r\n                throw new Error(\"API error\")\r\n            })\r\n    },\r\n    getFullName(fullName) {\r\n        return this._get(`name/${fullName}?fullText=true`)\r\n    },\r\n    sendShortName(shortName) {\r\n        return this._get(`name/${shortName}`)\r\n    },\r\n    sendCurrencyCode(currencyCode) {\r\n        return this._get(`currency/${currencyCode}`)\r\n    },\r\n    sendCountryCode(code){\r\n      return this._get(`alpha/${code}`)\r\n    },\r\n    allCountryData(){\r\n       return this._get(`all`)\r\n    }\r\n}\r\n\r\n","import {api} from \"../API/API\";\r\n\r\nconst COUNTRY_FULL_NAME = \"Countries/COUNTRY_FULL_NAME\"\r\nconst COUNTRY_SHORT_NAME = \"Countries/COUNTRY_SHORT_NAME\"\r\nconst CURRENCY_NAME = \"Countries/CURRENCY_NAME\"\r\nconst DATA_ITEM = \"Countries/DATA_ITEM\"\r\nconst ALL_DATA_COUNTRY = \"Countries/ALL_DATA_COUNTRY\"\r\nconst COUNTRY_CODE_CHENGED = \"Countries/COUNTRY_CODE_CHENGED\"\r\nconst COUNTRY_CODE = \"Countries/COUNTRY_CODE\"\r\nconst SET_ERROR = \"Countries/SET_ERROR\"\r\nconst SET_LOADING = \"Countries/SET_LOADING\"\r\n// const CHANGE_LOCAL = \"CHANGE_LOCAL\"\r\n\r\n\r\nconst initialState = {\r\n    countryFullName: \"\",\r\n    dataItems: [],\r\n    countryShortName: \"\",\r\n    currencyCode: \"\",\r\n    allDataItems: [],\r\n    countryCode: \"\",\r\n    arrRepeatedRequests: [],\r\n    error: null,\r\n    loading: false\r\n    // currentLocal: \"en\",\r\n\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case COUNTRY_FULL_NAME: {\r\n            return {\r\n                ...state,\r\n                countryFullName: action.inputValue\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case SET_LOADING: {\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        }\r\n        case COUNTRY_SHORT_NAME: {\r\n            return {\r\n                ...state,\r\n                countryShortName: action.inputValue\r\n            }\r\n        }\r\n        case CURRENCY_NAME: {\r\n            return {\r\n                ...state,\r\n                currencyCode: action.inputValue\r\n            }\r\n        }\r\n        case DATA_ITEM: {\r\n            return {\r\n                ...state,\r\n                dataItems: [...action.dataItems]\r\n            }\r\n        }\r\n        case ALL_DATA_COUNTRY: {\r\n\r\n            return {\r\n                ...state,\r\n                allDataItems: action.allDataCountry\r\n            }\r\n        }\r\n        case COUNTRY_CODE_CHENGED: {\r\n\r\n            return {\r\n                ...state,\r\n                countryCode: action.inputValue\r\n            }\r\n        }\r\n        case COUNTRY_CODE: {\r\n            return {\r\n                ...state,\r\n                dataItems: [action.dataItem]\r\n            }\r\n        }\r\n        // case CHANGE_LOCAL: {\r\n        //     return {\r\n        //         ...state,\r\n        //         currentLocal: [action.language]\r\n        //     }\r\n        // }\r\n    }\r\n    return state\r\n}\r\n\r\nexport const getFullNameSuccess = (inputValue) => ({type: COUNTRY_FULL_NAME, inputValue})\r\nexport const shortNameChangedAC = (inputValue) => ({type: COUNTRY_SHORT_NAME, inputValue})\r\nexport const currencyChangedAC = (inputValue) => ({type: CURRENCY_NAME, inputValue})\r\nexport const countryCodeChangeAC = (inputValue) => ({type: COUNTRY_CODE_CHENGED, inputValue})\r\nexport const allDataItemAC = (allDataCountry) => ({type: ALL_DATA_COUNTRY, allDataCountry})\r\nexport const sendCountryCodeAC = (dataItem) => ({type: COUNTRY_CODE, dataItem})\r\nexport const sendDataItemAC = (dataItems) => ({type: DATA_ITEM, dataItems: dataItems})\r\nexport const setError = (errorMessage) => ({type: SET_ERROR, error: errorMessage})\r\nexport const setLoading = (loading) => ({type: SET_LOADING, loading })\r\n// export const currentLocalAC = (language) => ({type: CHANGE_LOCAL, language})\r\n\r\nlet _errorInterval = null;\r\nconst _setError = (error, dispatch) => {\r\n    clearTimeout(_errorInterval);\r\n    dispatch(setError(error.message));\r\n    _errorInterval = setTimeout(() => {\r\n        dispatch(setError(null))\r\n    }, 4000)\r\n\r\n}\r\n\r\nconst _tryCatch = async (operation, dispatch) => {\r\n    try {\r\n        dispatch(setLoading(true))\r\n        await operation();\r\n    } catch (error) {\r\n        _setError(error, dispatch)\r\n    } finally {\r\n        dispatch(setLoading(false))\r\n    }\r\n}\r\n\r\n\r\nexport const getFullName = (fullName) => (dispatch) => {\r\n    // example of usage helper-wrapper function\r\n\r\n    _tryCatch(async () => {\r\n        const data = await api.getFullName(fullName);\r\n        dispatch(sendDataItemAC(data));\r\n        dispatch(getFullNameSuccess(\"\"));\r\n    }, dispatch);\r\n}\r\n\r\n\r\nexport const sendShortNameTC = (shortName) => (dispatch) => {\r\n    // example of usage helper-wrapper function\r\n    _tryCatch(async () => {\r\n        const data = await api.sendShortName(shortName);\r\n        dispatch(sendDataItemAC(data));\r\n        dispatch(shortNameChangedAC(\"\"))\r\n    }, dispatch)\r\n}\r\nexport const sendCurrencyCodeTC = (currencyCode) => (dispatch) => {\r\n    // example with promise\r\n    api.sendCurrencyCode(currencyCode)\r\n        .then(data => {\r\n            dispatch(sendDataItemAC(data));\r\n            dispatch(currencyChangedAC(\"\"))\r\n        })\r\n        .catch(error => _setError(error, dispatch))\r\n}\r\nexport const sendCountryCodeTC = (code) => (dispatch) => {\r\n    // example with promise\r\n    api.sendCountryCode(code)\r\n        .then(data => {\r\n            dispatch(sendCountryCodeAC(data));\r\n            dispatch(countryCodeChangeAC(\"\"))\r\n        })\r\n        .catch(error => _setError(error, dispatch))\r\n}\r\nexport const allCountryDataTC = () => (dispatch) => {\r\n    api.allCountryData()\r\n        .then(data => {\r\n\r\n            dispatch(allDataItemAC(data));\r\n        })\r\n        .catch(error => _setError(error, dispatch))\r\n}\r\n\r\n\r\nexport default reducer;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputFullName =(props)=>{\r\n\r\n        return(\r\n            <div className=\"inputFullName\">\r\n                <div className=\"input\">\r\n                    <Input type=\"text\"\r\n                           value={props.countryFullName}\r\n                           onChange={props.fullNameChanged}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"button\">\r\n                    <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendFullName}/>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\nexport default InputFullName;","import React from \"react\";\r\nimport {FormattedHTMLMessage} from \"react-intl\";\r\n\r\nconst CountryProperty = ({name, defaultMessage, dataItems, isImage = false, isArrayOfObjects = false}) => {\r\n    if (dataItems.length === 0) return null;\r\n\r\n    const isArray = Array.isArray(dataItems[0][name]);\r\n\r\n\r\n    const text = isArray ? <>\r\n        {dataItems[0][name].map(el => isArrayOfObjects ? el.name: el)}</> : dataItems[0][name]\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n\r\n                       <b> <FormattedHTMLMessage\r\n                            id={'drawingData.' + name}\r\n                            defaultMessage={defaultMessage}\r\n                        />\r\n</b>\r\n                        { isImage\r\n                            ? <img className=\"flag\" src={dataItems[0][name]}/>\r\n                            : <span> {text}</span>\r\n                        }\r\n\r\n\r\n                    </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst DrawingData = (props) => {\r\n    let {dataItems} = props;\r\n    return (\r\n\r\n        <div className=\"DrawingData\">\r\n\r\n            <CountryProperty name={'name'} defaultMessage={'Country'} dataItems={dataItems}/>\r\n            <CountryProperty name={'capital'} defaultMessage={'Capital'} dataItems={dataItems}/>\r\n            <CountryProperty name={'region'} defaultMessage={'Region'} dataItems={dataItems}/>\r\n            <CountryProperty name={'subregion'} defaultMessage={'Subregion'} dataItems={dataItems}/>\r\n            <CountryProperty name={'population'} defaultMessage={'Population'} dataItems={dataItems}/>\r\n            <CountryProperty name={'topLevelDomain'} defaultMessage={'Top level domain'} dataItems={dataItems}/>\r\n            <CountryProperty name={'alpha2Code'} defaultMessage={'Alpha2Code'} dataItems={dataItems}/>\r\n            <CountryProperty name={'alpha3Code'} defaultMessage={'Alpha3Code'} dataItems={dataItems}/>\r\n            <CountryProperty name={'languages'} defaultMessage={'Languages'} dataItems={dataItems} isArrayOfObjects={true}/>\r\n            <CountryProperty name={'borders'} defaultMessage={'Borders'} dataItems={dataItems}/>\r\n            <CountryProperty name={'timezones'} defaultMessage={'Timezones'} dataItems={dataItems}/>\r\n            <CountryProperty name={'nativeName'} defaultMessage={'Native name'} dataItems={dataItems}/>\r\n            <CountryProperty name={'numericCode'} defaultMessage={'Numeric code country'} dataItems={dataItems}/>\r\n            <CountryProperty name={'flag'} defaultMessage={'Flag'} dataItems={dataItems} isImage={true}/>\r\n\r\n\r\n            {/*<div>*/}\r\n            {/*    <span><FormattedHTMLMessage id={'drawingData.flag'}*/}\r\n            {/*                                defaultMessage={'Flag'}/> {(dataItems.length > 0) &&*/}\r\n            {/*    <img className=\"flag\" src={dataItems[0].flag}/>}</span>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawingData;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputShortName =(props)=> {\r\n\r\n        return (\r\n            <div className=\"countryShortName\">\r\n                <div className=\"input\">\r\n                    <Input type=\"text\"\r\n                           value={props.countryShortName}\r\n                           onChange={props.shortNameChanged}\r\n\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendShortName}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default InputShortName;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputCurrency =(props)=>{\r\n    return(\r\n\r\n        <div className=\"currencyCode\">\r\n            <div className=\"input\">\r\n                <Input type=\"text\"\r\n                       onChange={props.currencyChanged}\r\n                       value={props.currencyCode}/>\r\n            </div>\r\n            <div>\r\n                <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendCurrencyCode}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InputCurrency;\r\n","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputAlpha3CodeCountry = (props) => {\r\n\r\n    return (\r\n        <div className=\"alpha3CodeCountry\">\r\n            <div className=\"input\">\r\n\r\n                <Input type=\"text\"\r\n                       value={props.countryCode}\r\n                       onChange={props.countryCodeChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendCountryCode}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InputAlpha3CodeCountry;","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport {\n    allCountryDataTC, changeLocalAC,\n    countryCodeChangeAC,\n    currencyChangedAC, currentLocalAC,\n    getFullNameSuccess, getFullName, sendCountryCodeTC, sendCurrencyCodeTC, sendShortNameTC,\n    shortNameChangedAC\n} from \"./Components/Redux/reducer\";\nimport * as axios from \"axios\";\nimport InputFullName from \"./Components/InputFullName\";\nimport DrawingData from \"./Components/DrawingData\";\nimport InputShortName from \"./Components/InputShortName\";\nimport InputCurrency from \"./Components/InputCurrency\";\nimport {Switch, Icon} from 'antd';\nimport messages_ru from \"./Components/i18next/ru\";\nimport messages_en from \"./Components/i18next/en\";\nimport {FormattedHTMLMessage, IntlProvider} from 'react-intl';\nimport 'antd/dist/antd.css';\nimport InputAlpha3CodeCountry from \"./Components/InputAlpha3CodeCountry\";\n\nconst LANGUAGES = {\n    EN: 'en',\n    RU: 'ru'\n}\n\nclass App extends React.Component {\n    state = {\n        isChecked: true,\n        currentLocal: LANGUAGES.EN,\n        messages: {\n            [LANGUAGES.RU]: messages_ru,\n            [LANGUAGES.EN]: messages_en\n        }\n    };\n    changeLocal = () => {\n        const newLang = this.state.currentLocal === LANGUAGES.EN ? LANGUAGES.RU : LANGUAGES.EN;\n            this.setState({currentLocal: newLang})\n            localStorage.setItem('language', newLang);\n    };\n\n    componentDidMount() {\n        const language = localStorage.getItem('language');\n        if (language) {\n            this.setState({currentLocal: language})\n        }\n        this.props.allCountryData();\n    }\n\n    fullNameChanged = (e) => {\n        this.props.fullNameChanged(e.currentTarget.value)\n    }\n    shortNameChanged = (e) => {\n        this.props.shortNameChanged(e.currentTarget.value)\n    }\n    currencyChanged = (e) => {\n        this.props.currencyChanged(e.currentTarget.value)\n    }\n    countryCodeChange = (e) => {\n        this.props.countryCodeChange(e.currentTarget.value)\n    }\n\n    sendFullName = () => {\n        const fullName = this.props.countryFullName\n        this.props.sendFullDataItem(fullName)\n    }\n    sendShortName = () => {\n        const shortName = this.props.countryShortName\n        this.props.sendShortDataItem(shortName);\n    }\n    sendCurrencyCode = () => {\n        const currencyCode = this.props.currencyCode\n        this.props.sendCurrencyCode(currencyCode);\n\n    }\n    sendCountryCode = () => {\n        const code = this.props.countryCode\n        this.props.sendCountryCode(code);\n    }\n\n    render() {\n        const CodeCountries = this.props.allDataItems.map(el => <option className='optionClass'\n                                                                       key={el.id}> {el.name}: {el.alpha3Code}\n        </option>);\n        let isChecked = this.state.currentLocal === LANGUAGES.EN;\n\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <IntlProvider locale={this.state.currentLocal}\n                                  messages={this.state.messages[this.state.currentLocal]}\n\n                    >\n                        <header className=\"header\">\n                            <div className=\"switch\">\n                                <FormattedHTMLMessage id={'app.language'}\n                                                      defaultMessage={'Language'}\n                                                      className=\"title\"\n                                ></FormattedHTMLMessage>\n                                <Switch className=\"switchBtn\" checked={isChecked} onChange={this.changeLocal}\n                                        checkedChildren=\"EN\" unCheckedChildren=\"RU\"/>\n                            </div>\n                        </header>\n                        <div className=\"inputForm\">\n                            <div><FormattedHTMLMessage id={'app.fullName'}\n                                                       defaultMessage={'Enter full country name'}><span></span></FormattedHTMLMessage>\n                                <InputFullName countryFullName={this.props.countryFullName}\n                                               fullNameChanged={this.fullNameChanged}\n                                               sendFullName={this.sendFullName}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.shortName'}\n                                                       defaultMessage={'Enter short country name'}><span></span></FormattedHTMLMessage>\n                                <InputShortName countryShortName={this.props.countryShortName}\n                                                shortNameChanged={this.shortNameChanged}\n                                                sendShortName={this.sendShortName}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.currencyCode'}\n                                                       defaultMessage={'Enter currency code'}><span></span></FormattedHTMLMessage>\n                                <InputCurrency currencyCode={this.props.currencyCode}\n                                               currencyChanged={this.currencyChanged}\n                                               sendCurrencyCode={this.sendCurrencyCode}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.countryCode'}\n                                                       defaultMessage={'Enter country code'}><span></span></FormattedHTMLMessage>\n                                <InputAlpha3CodeCountry countryCodeChange={this.countryCodeChange}\n                                                        countryCode={this.props.countryCode}\n                                                        sendCountryCode={this.sendCountryCode}\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className={'inputForm error'}>\n\n                            {this.props.error}\n                        </div>\n                        <div className={'inputForm loading'}>\n                            {this.props.loading && \"loading...\"}\n\n                        </div>\n                        <div className=\"drawingData\">\n                            <DrawingData dataItems={this.props.dataItems}/>\n                            <select className=\"select\">\n                                {CodeCountries}\n                            </select>\n\n                        </div>\n\n                    </IntlProvider>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        error: state.error,\n        countryFullName: state.countryFullName,\n        dataItems: state.dataItems,\n        countryShortName: state.countryShortName,\n        currencyCode: state.currencyCode,\n        allDataItems: state.allDataItems,\n        countryCode: state.countryCode,\n        // currentLocal: state.currentLocal,\n    }\n}\n/*const mapDispatchToProps = (dispatch) => {\n    return {\n        fullNameChanged: (inputValue) => {\n            dispatch(getFullNameSuccess(inputValue))\n        },\n        shortNameChanged: (shortName) => {\n            dispatch(shortNameChangedAC(shortName))\n        },\n        currencyChanged: (inputValue) => {\n            dispatch(currencyChangedAC(inputValue))\n        },\n        countryCodeChange: (inputValue) => {\n            dispatch(countryCodeChangeAC(inputValue))\n        },\n        allCountryData: () => {\n            dispatch(allCountryDataTC())\n        },\n        sendFullDataItem: (fullName) => {\n            dispatch(getFullName(fullName))\n        },\n        sendShortDataItem: (shortName) => {\n            dispatch(sendShortNameTC(shortName))\n        },\n        sendCurrencyCode: (currencyCode) => {\n            dispatch(sendCurrencyCodeTC(currencyCode))\n        },\n        sendCountryCode: (code) => {\n            dispatch(sendCountryCodeTC(code))\n        },\n        // currentLocal: (language) => {\n        //     dispatch(currentLocalAC(language))\n        // },\n    }\n}*/\nconst ConnectApp = connect(mapStateToProps,\n    {\n        fullNameChanged: getFullNameSuccess,\n        shortNameChanged: shortNameChangedAC,\n        currencyChanged: currencyChangedAC,\n        countryCodeChange: countryCodeChangeAC,\n        allCountryData: allCountryDataTC,\n        sendFullDataItem: getFullName,\n        sendShortDataItem: sendShortNameTC,\n        sendCurrencyCode: sendCurrencyCodeTC,\n        sendCountryCode: sendCountryCodeTC\n    })(App)\n\nexport default ConnectApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst store =createStore(reducer,applyMiddleware(thunkMiddleware))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Components/Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}