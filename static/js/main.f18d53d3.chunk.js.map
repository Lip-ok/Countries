{"version":3,"sources":["Components/API/API.js","Components/Redux/reducer.js","Components/InputFullName.jsx","Components/DrawingData.jsx","Components/InputShortName.jsx","Components/InputCurrency.jsx","Components/InputAlpha3CodeCountry.jsx","App.js","serviceWorker.js","Components/Redux/store.js","index.js"],"names":["instance","axios","baseURL","api","fullName","get","shortName","currencyCode","code","initialState","countryFullName","dataItem","countryShortName","allDataItem","countryCode","fullNameChangedAC","inputValue","type","shortNameChangedAC","currencyChangedAC","countryCodeChangeAC","sendDataItemAC","reducer","state","action","allDataCountry","currentLocal","bool","InputFullName","props","className","value","onChange","fullNameChanged","shape","icon","onClick","sendFullName","DrawingData","id","defaultMessage","length","name","capital","region","subregion","population","topLevelDomain","alpha2Code","alpha3Code","languages","map","l","borders","timezones","nativeName","numericCode","src","flag","InputShortName","shortNameChanged","sendShortName","InputCurrency","currencyChanged","sendCurrencyCode","InputAlpha3CodeCountry","countryCodeChange","sendCountryCode","App","isChecked","messages","messages_ru","messages_en","changeLocal","e","setState","currentTarget","sendFullDataItem","sendShortDataItem","this","allCountryData","CodeCountries","el","key","locale","checked","checkedChildren","unCheckedChildren","React","Component","ConnectApp","connect","dispatch","then","res","data","fullNameChangedTC","sendShortNameTC","sendCurrencyCodeTC","sendCountryCodeAC","sendCountryCodeTC","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f18d53d3.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://restcountries.eu/rest/v2/\",\r\n})\r\n\r\nexport const api = {\r\n\r\n    getFullName(fullName) {\r\n        return instance.get(`name/${fullName}?fullText=true`)\r\n    },\r\n    sendShortName(shortName) {\r\n        return instance.get(`name/${shortName}`)\r\n    },\r\n\r\n    sendCurrencyCode(currencyCode) {\r\n        return instance.get(`currency/${currencyCode}`)\r\n    },\r\n    sendCountryCode(code){\r\n      return instance.get(`alpha/${code}`)\r\n    },\r\n    allCountryData(){\r\n       return instance.get(`all`)\r\n    }\r\n}\r\n\r\n","import {api} from \"../API/API\";\r\n\r\nconst COUNTRY_FULL_NAME = \"COUNTRY_FULL_NAME\"\r\nconst COUNTRY_SHORT_NAME = \"COUNTRY_SHORT_NAME\"\r\nconst CURRENCY_NAME = \"CURRENCY_NAME\"\r\nconst DATA_ITEM = \"DATA_ITEM\"\r\nconst ALL_DATA_COUNTRY = \"ALL_DATA_COUNTRY\"\r\nconst COUNTRY_CODE_CHENGED = \"COUNTRY_CODE_CHENGED\"\r\nconst COUNTRY_CODE = \"COUNTRY_CODE\"\r\nconst CHANGE_LOCAL = \"CHANGE_LOCAL\"\r\n\r\n\r\nconst initialState = {\r\n    countryFullName: \"\",\r\n    dataItem: [],\r\n    countryShortName: \"\",\r\n    currencyCode: \"\",\r\n    allDataItem: [],\r\n    countryCode: \"\",\r\n\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case COUNTRY_FULL_NAME: {\r\n            return {\r\n                ...state,\r\n                countryFullName: action.inputValue\r\n            }\r\n        }\r\n        case COUNTRY_SHORT_NAME: {\r\n            return {\r\n                ...state,\r\n                countryShortName: action.inputValue\r\n            }\r\n        }\r\n        case CURRENCY_NAME: {\r\n            return {\r\n                ...state,\r\n                currencyCode: action.inputValue\r\n            }\r\n        }\r\n        case DATA_ITEM: {\r\n            return {\r\n                ...state,\r\n                dataItem: [...action.dataItem]\r\n            }\r\n        }\r\n        case ALL_DATA_COUNTRY: {\r\n\r\n            return {\r\n                ...state,\r\n                allDataItem: action.allDataCountry\r\n            }\r\n        }\r\n        case COUNTRY_CODE_CHENGED: {\r\n\r\n            return {\r\n                ...state,\r\n                countryCode: action.inputValue\r\n            }\r\n        }\r\n        case COUNTRY_CODE: {\r\n            return {\r\n                ...state,\r\n                dataItem: [action.dataItem]\r\n            }\r\n        }\r\n        case CHANGE_LOCAL: {\r\n            return {\r\n                ...state,\r\n                currentLocal: [action.bool]\r\n            }\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport const fullNameChangedAC = (inputValue) => ({type: COUNTRY_FULL_NAME, inputValue})\r\nexport const shortNameChangedAC = (inputValue) => ({type: COUNTRY_SHORT_NAME, inputValue})\r\nexport const currencyChangedAC = (inputValue) => ({type: CURRENCY_NAME, inputValue})\r\nexport const countryCodeChangeAC = (inputValue) => ({type: COUNTRY_CODE_CHENGED, inputValue})\r\nexport const allDataItemAC = (allDataCountry) => ({type: ALL_DATA_COUNTRY, allDataCountry})\r\nexport const sendCountryCodeAC = (dataItem) => ({type: COUNTRY_CODE, dataItem})\r\nexport const sendDataItemAC = (dataItem) => ({type: DATA_ITEM, dataItem})\r\nexport const changeLocalAC = (bool) => ({type: CHANGE_LOCAL, bool})\r\n\r\n\r\nexport const fullNameChangedTC = (fullName) => (dispatch) => {\r\n    api.getFullName(fullName).then(res => {\r\n        const dataItem = res.data;\r\n        dispatch(sendDataItemAC(dataItem));\r\n        dispatch(fullNameChangedAC(\"\"));\r\n    })\r\n}\r\nexport const sendShortNameTC = (shortName) => (dispatch) => {\r\n    api.sendShortName(shortName).then(res => {\r\n        const dataItem = res.data;\r\n        dispatch(sendDataItemAC(dataItem));\r\n        dispatch(shortNameChangedAC(\"\"))\r\n    })\r\n}\r\nexport const sendCurrencyCodeTC = (currencyCode) => (dispatch) => {\r\n    api.sendCurrencyCode(currencyCode).then(res => {\r\n        const dataItem = res.data;\r\n        dispatch(sendDataItemAC(dataItem));\r\n        dispatch(currencyChangedAC(\"\"))\r\n    })\r\n}\r\nexport const sendCountryCodeTC = (code) => (dispatch) => {\r\n    api.sendCountryCode(code).then(res => {\r\n        const dataItem = res.data;\r\n        dispatch(sendCountryCodeAC(dataItem));\r\n        dispatch(countryCodeChangeAC(\"\"))\r\n    })\r\n}\r\nexport const allCountryDataTC = () => (dispatch) => {\r\n    api.allCountryData().then(res => {\r\n        const dataItem = res.data;\r\n        dispatch(allDataItemAC(dataItem));\r\n    })\r\n}\r\n\r\n\r\nexport default reducer;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputFullName =(props)=>{\r\n\r\n        return(\r\n            <div className=\"inputFullName\">\r\n                <div className=\"input\">\r\n                    <Input type=\"text\"\r\n                           value={props.countryFullName}\r\n                           onChange={props.fullNameChanged}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"button\">\r\n                    <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendFullName}/>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\nexport default InputFullName;","import React from \"react\";\r\nimport {FormattedHTMLMessage} from \"react-intl\";\r\n\r\n\r\nconst DrawingData = (props) => {\r\n    return (\r\n\r\n        <div className=\"DrawingData\">\r\n            <div>\r\n                <span><FormattedHTMLMessage\r\n                    id={'drawingData.country'}\r\n                    defaultMessage={'country'}/> {(props.dataItem.length > 0) && props.dataItem[0].name}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.capital'}\r\n                                            defaultMessage={'Capital'}/> {(props.dataItem.length > 0) && props.dataItem[0].capital}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.region'}\r\n                                            defaultMessage={'Region'}/> {(props.dataItem.length > 0) && props.dataItem[0].region}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.subregion'}\r\n                                            defaultMessage={'Subregion'}/> {(props.dataItem.length > 0) && props.dataItem[0].subregion}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.population'}\r\n                                            defaultMessage={'Population'}/> {(props.dataItem.length > 0) && props.dataItem[0].population}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.topLevelDomain'}\r\n                                            defaultMessage={'Top level domain'}/> {(props.dataItem.length > 0) && props.dataItem[0].topLevelDomain}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.alpha2Code'}\r\n                                            defaultMessage={'Alpha2Code'}/> {(props.dataItem.length > 0) && props.dataItem[0].alpha2Code}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.alpha3Code'}\r\n                                            defaultMessage={'Alpha3Code'}/> {(props.dataItem.length > 0) && props.dataItem[0].alpha3Code}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.languages'}\r\n                                            defaultMessage={'Languages'}/> {(props.dataItem.length > 0) && props.dataItem[0].languages.map(l => (\r\n                    <span>{l.name}   </span>))}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.borders'}\r\n                                            defaultMessage={'Borders'}/> {(props.dataItem.length > 0) && props.dataItem[0].borders.map(l => (\r\n                    <span>{l}   </span>))}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.timezones'}\r\n                                            defaultMessage={'Timezones'}/> {(props.dataItem.length > 0) && props.dataItem[0].timezones}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.nativeName'}\r\n                                            defaultMessage={'Native name'}/> {(props.dataItem.length > 0) && props.dataItem[0].nativeName}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.numericCodeCountry'}\r\n                                            defaultMessage={'Numeric code country'}/> {(props.dataItem.length > 0) && props.dataItem[0].numericCode}</span>\r\n            </div>\r\n            <div>\r\n                <span><FormattedHTMLMessage id={'drawingData.flag'}\r\n                                            defaultMessage={'Flag'}/> {(props.dataItem.length > 0) &&\r\n                <img className=\"flag\" src={props.dataItem[0].flag}/>}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawingData;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputShortName =(props)=> {\r\n\r\n        return (\r\n            <div className=\"countryShortName\">\r\n                <div className=\"input\">\r\n                    <Input type=\"text\"\r\n                           value={props.countryShortName}\r\n                           onChange={props.shortNameChanged}\r\n\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendShortName}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default InputShortName;","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputCurrency =(props)=>{\r\n    return(\r\n\r\n        <div className=\"currencyCode\">\r\n            <div className=\"input\">\r\n                <Input type=\"text\"\r\n                       onChange={props.currencyChanged}\r\n                       value={props.currencyCode}/>\r\n            </div>\r\n            <div>\r\n                <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendCurrencyCode}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InputCurrency;\r\n","import React from \"react\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport './../App.css';\r\n\r\nconst InputAlpha3CodeCountry = (props) => {\r\n\r\n    return (\r\n        <div className=\"alpha3CodeCountry\">\r\n            <div className=\"input\">\r\n\r\n                <Input type=\"text\"\r\n                       value={props.countryCode}\r\n                       onChange={props.countryCodeChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type=\"primary\" shape=\"circle\" icon=\"search\" onClick={props.sendCountryCode}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InputAlpha3CodeCountry;","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport {\n    allCountryDataTC, changeLocalAC,\n    countryCodeChangeAC,\n    currencyChangedAC,\n    fullNameChangedAC, fullNameChangedTC, sendCountryCodeTC, sendCurrencyCodeTC, sendShortNameTC,\n    shortNameChangedAC\n} from \"./Components/Redux/reducer\";\nimport * as axios from \"axios\";\nimport InputFullName from \"./Components/InputFullName\";\nimport DrawingData from \"./Components/DrawingData\";\nimport InputShortName from \"./Components/InputShortName\";\nimport InputCurrency from \"./Components/InputCurrency\";\nimport {Switch, Icon} from 'antd';\nimport messages_ru from \"./Components/i18next/ru\";\nimport messages_en from \"./Components/i18next/en\";\nimport {FormattedHTMLMessage, IntlProvider} from 'react-intl';\nimport 'antd/dist/antd.css';\nimport InputAlpha3CodeCountry from \"./Components/InputAlpha3CodeCountry\";\n\n\n\n\n\n\nclass App extends React.Component {\n\n    instance = axios.create({\n        baseURL: \"https://restcountries.eu/rest/v2/\",\n    })\n    state = {\n        isChecked: true,\n        currentLocal: \"en\",\n        messages: {\n            'ru': messages_ru,\n            'en': messages_en\n        }\n    };\n    changeLocal = (e) => {\n        if (e) {\n            this.setState({currentLocal: 'en'})\n        } else {\n            this.setState({currentLocal: 'ru'})\n        }\n    };\n    componentDidMount() {\n            this.props.allCountryData();\n    }\n    fullNameChanged = (e) => {\n        this.props.fullNameChanged(e.currentTarget.value)\n    }\n    shortNameChanged = (e) => {\n        this.props.shortNameChanged(e.currentTarget.value)\n    }\n    currencyChanged = (e) => {\n        this.props.currencyChanged(e.currentTarget.value)\n    }\n    countryCodeChange = (e) => {\n        this.props.countryCodeChange(e.currentTarget.value)\n    }\n\n    sendFullName = () => {\n        const fullName = this.props.countryFullName\n               this.props.sendFullDataItem(fullName)\n    }\n    sendShortName = () => {\n        const shortName = this.props.countryShortName\n            this.props.sendShortDataItem(shortName);\n    }\n    sendCurrencyCode = () => {\n        const currencyCode = this.props.currencyCode\n            this.props.sendCurrencyCode(currencyCode);\n\n    }\n    sendCountryCode = () => {\n        const code = this.props.countryCode\n            this.props.sendCountryCode(code);\n    }\n\n    render() {\n        const CodeCountries = this.props.allDataItem.map(el => <option className='optionClass' key={el.id}> {el.name}: {el.alpha3Code}\n        </option>);\n        let isChecked = this.state.currentLocal === 'en';\n\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <IntlProvider locale={this.state.currentLocal}\n                                  messages={this.state.messages[this.state.currentLocal]}\n\n                    >\n                        <header className=\"header\">\n                        <div className=\"switch\">\n                            <FormattedHTMLMessage  id={'app.language'}\n                                                  defaultMessage={'Language'}\n                                                   className=\"title\"\n                            ></FormattedHTMLMessage>\n                            <Switch  className=\"switchBtn\" checked={isChecked} onChange={this.changeLocal}\n                                    checkedChildren=\"EN\" unCheckedChildren=\"RU\"/>\n                        </div>\n                        </header>\n\n                        <div className=\"inputForm\">\n                            <div> <FormattedHTMLMessage id={'app.fullName'}\n                                                        defaultMessage={'Enter full country name'}><span></span></FormattedHTMLMessage>\n                                <InputFullName countryFullName={this.props.countryFullName}\n                                               fullNameChanged={this.fullNameChanged}\n                                               sendFullName={this.sendFullName}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.shortName'}\n                                                       defaultMessage={'Enter short country name'}><span></span></FormattedHTMLMessage>\n                                <InputShortName countryShortName={this.props.countryShortName}\n                                                shortNameChanged={this.shortNameChanged}\n                                                sendShortName={this.sendShortName}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.currencyCode'}\n                                                       defaultMessage={'Enter currency code'}><span></span></FormattedHTMLMessage>\n                                <InputCurrency currencyCode={this.props.currencyCode}\n                                               currencyChanged={this.currencyChanged}\n                                               sendCurrencyCode={this.sendCurrencyCode}\n                                />\n                            </div>\n                            <div><FormattedHTMLMessage id={'app.countryCode'}\n                                                       defaultMessage={'Enter country code'}><span></span></FormattedHTMLMessage>\n                                <InputAlpha3CodeCountry countryCodeChange={this.countryCodeChange}\n                                                        countryCode={this.props.countryCode}\n                                                        sendCountryCode={this.sendCountryCode}\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"drawingData\">\n                            <DrawingData dataItem={this.props.dataItem}/>\n                            <select className=\"select\">\n                                    {CodeCountries}\n                                </select>\n\n                        </div>\n\n                    </IntlProvider>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        countryFullName: state.countryFullName,\n        dataItem: state.dataItem,\n        countryShortName: state.countryShortName,\n        currencyCode: state.currencyCode,\n        allDataItem: state.allDataItem,\n        countryCode: state.countryCode,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fullNameChanged: (inputValue) => {\n            dispatch(fullNameChangedAC(inputValue))\n        },\n        shortNameChanged: (shortName) => {\n            dispatch(shortNameChangedAC(shortName))\n        },\n        currencyChanged: (inputValue) => {\n            dispatch(currencyChangedAC(inputValue))\n        },\n        countryCodeChange: (inputValue) => {\n            dispatch(countryCodeChangeAC(inputValue))\n        },\n        allCountryData: () => {\n            dispatch(allCountryDataTC())\n        },\n        sendFullDataItem: (fullName) => {\n            dispatch(fullNameChangedTC(fullName))\n        },\n        sendShortDataItem: (shortName) => {\n            dispatch(sendShortNameTC(shortName))\n        },\n        sendCurrencyCode: (currencyCode) => {\n            dispatch(sendCurrencyCodeTC(currencyCode))\n        },\n        sendCountryCode: (code) => {\n            dispatch(sendCountryCodeTC(code))\n        },\n    }\n}\nconst ConnectApp = connect(mapStateToProps, mapDispatchToProps)(App)\n\nexport default ConnectApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst store =createStore(reducer,applyMiddleware(thunkMiddleware))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Components/Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}